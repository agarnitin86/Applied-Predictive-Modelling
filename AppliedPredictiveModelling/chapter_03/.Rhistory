library(e1071)
library(ggplot2)
library(caret)
library(plyr)
load("/home/nitin/Downloads/AppliedPredictiveModeling/data/twoClassData.RData")
View(predictors)
d = twoClassData
load("/home/nitin/Downloads/AppliedPredictiveModeling/data/twoClassData.RData")
d = predictors
d
data(twoClassData)
data("/home/nitin/Downloads/AppliedPredictiveModeling/data/twoClassData.RData")
data(predictors)
data("predictors"")
data("predictors")
data("predictors")
d = predictors
head(d)
head(predictors)
str(predictors)
str(classes)
head(classes)
trainingRows = createDataPartition(classes, p = 0.8, list=FALSE)
set.seed(1)
trainingRows = createDataPartition(classes, p = 0.8, list=FALSE)
head(trainingRows)
trainPredictors = predictors[trainingRows,]
trainClasses = classes[trainingRows]
testPredictors <- predictors[-trainingRows,]
testClasses <- classes[-trainingRows]
str(trainPredictors)
str(testPredictors)
repeatedSplits <- createDataPartition(trainClasses, p = 0.8, times = 3)
set.seed(1)
repeatedSplits <- createDataPartition(trainClasses, p = 0.8, times = 3)
str(repeatedSplits)
cvSplits <- createFolds(trainClasses, k=10, returnTrain =  TRUE)
str(cvSplits)
fold1 <- cvSplits[[1]]
trainPredictors <- as.matrix(trainPredictors)
## Using knn3 for 5-neares neighbours
## Using knn3 for 5-neares neighbours
trainPredictors <- as.matrix(trainPredictors)
knnFit <- knn3(x = trainPredictors, y = trainClasses, k = 5)
str(trainPredictors)
knnFit <- knn3(x = trainPredictors, y = trainClasses, k = 5)
knnFit
testPredictions <- predict(knnFit, newdata = testPredictors, type = "class")
head(testPredictions)
data(GermanCredit)
data(GermanCreditTrain)
