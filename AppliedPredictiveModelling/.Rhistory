predict(Ch1AreaTrans, head(segData$AreaCh1))
load("/home/nitin/Downloads/AppliedPredictiveModeling/data/segmentationOriginal.RData")
d = segmentationOriginal
names(d)
segData <- subset(segmentationOriginal, Case == "Train")
cellid <- segData$Cell
class <- segData$Class
case <- segData$Case
segData <- segData[,-(1:3)]
statusColNum <- grep("Status", names(segData))
segData <- segData[,-statusColNum]
skewness(segData$AngleCh1)
library(e1071)
skewness(segData$AngleCh1)
# Compute skewness across all columns
skewValues <- apply(segData, 2, skewness)
library(ggplot2)
library(caret)
library(pylr)
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
library(pylr)
library(plyr)
library("caret", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
pcaObject <- prcomp(segData, center = TRUE, scale. = TRUE)
pcaObject
head(pcaObject)
head(pcaObject$x[, 1:5])
head(pcaObject$x[, 1:6])
preProcess(segData, method = c("BoxCox", "center", "scale", "pca"))
###For example, to Boxâ€“Cox transform, center, and scale the data, then execute PCA for signal extraction :
install.packages("AppliedPredictiveModelling")
install.packages("e1071")
install.packages("plyr")
library(e1071)
library(ggplot2)
library(caret)
library(plyr)
library("AppliedPredictiveModelling")
load("/home/nitin/Downloads/AppliedPredictiveModeling/data/segmentationOriginal.RData")
d = segmentationOriginal
names(d)
segData <- subset(segmentationOriginal, Case == "Train")
cellid <- segData$Cell
class <- segData$Class
case <- segData$Case
segData <- segData[,-(1:3)]
statusColNum <- grep("Status", names(segData))
segData <- segData[,-statusColNum]
skewness(segData$AngleCh1)
# Compute skewness across all columns
skewValues <- apply(segData, 2, skewness)
## Apply BoxCoxTrans to the new data
Ch1AreaTrans <- BoxCoxTrans(segData$AreaCh1)
Ch1AreaTrans
## Original data
head(segData$AreaCh1)
## After transformation
predict(Ch1AreaTrans, head(segData$AreaCh1))
## Apply transformation to a set of predictors
## Using pca
pcaObject <- prcomp(segData, center = TRUE, scale. = TRUE)
head(pcaObject)
load("/home/nitin/Downloads/AppliedPredictiveModeling/data/segmentationOriginal.RData")
d = segmentationOriginal
names(d)
segData <- subset(segmentationOriginal, Case == "Train")
cellid <- segData$Cell
class <- segData$Class
case <- segData$Case
segData <- segData[,-(1:3)]
statusColNum <- grep("Status", names(segData))
segData <- segData[,-statusColNum]
skewness(segData$AngleCh1)
# Compute skewness across all columns
skewValues <- apply(segData, 2, skewness)
## Apply BoxCoxTrans to the new data
Ch1AreaTrans <- BoxCoxTrans(segData$AreaCh1)
Ch1AreaTrans
## Original data
head(segData$AreaCh1)
## After transformation
predict(Ch1AreaTrans, head(segData$AreaCh1))
## Apply transformation to a set of predictors
## Using pca
pcaObject <- prcomp(segData, center = TRUE, scale. = TRUE)
head(pcaObject)
transformed <- predict(segData, trans)
transformed <- predict(trans, segData)
trans <- preProcess(segData, method = c("BoxCox", "center", "scale", "pca"))
## Apply the above transformation to segData
transformed <- predict(trans, segData)
head(transformd[,1:5])
head(transformed[,1:5])
***Filter nearZero variance predictors***
nearZeroVar(segData)
***Calculating correlation between predictors***
correlations <- cor(segData)
dim(correlations)
correlations[1:4,1:4]
library(corrplot)
install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
corrplot(correlations, order = "hclust")
highCorr <- findCorrelation(correclations, cutoff = 0.75)
highCorr <- findCorrelation(correlations, cutoff = 0.75)
length(highCorr)
highCorr
***Filtering based on correlations. (Predictors recommended for deletion)***
filteredSegData <- segData[,-highCorr]
filteredSegData
names(filteredSegData)
load("/home/nitin/Downloads/AppliedPredictiveModeling/data/segmentationOriginal.RData")
head(carSubset)
head(cars)
